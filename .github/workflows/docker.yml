name: Build Docker image and deploy to Swarm

on:
  push:
    branches: ["master"] # Publish as Docker "latest"
    tags: ["*"]
  pull_request:
    # Only rebuild Docker images if a PR affects it specifically to avoid
    # redundant work since the main workflow already deals with testing builds
    paths:
      - Dockerfile
      - docker-compose.yaml
      - .github/workflows/docker.yml

jobs:
  build:
    runs-on: ubuntu-latest
    if: >-
      !(
        contains(github.event.head_commit.message, '[ci skip]') ||
        contains(github.event.head_commit.message, '[skip ci]') ||
        contains(github.event.head_commit.message, '[actions skip]') ||
        contains(github.event.head_commit.message, '[skip actions]') ||
        contains(github.event.head_commit.message, '[skip build]') ||
        contains(github.event.head_commit.message, '[build skip]')
      )
    outputs:
      tag: ${{ steps.infer.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Infer image tag
        id: infer
        if: github.event_name == 'push'
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Use Docker `latest` tag convention
          [[ "$VERSION" == "master" ]] && VERSION=latest
          echo "::set-output name=tag::$VERSION"
      - uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name == 'push' }}
          tags: ghcr.io/kevinlul/eris-bot-template:${{ steps.infer.outputs.tag || 'latest' }}
          build-args: REVISION=${{ github.sha }}
          pull: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.tag }} == 'latest'
    steps:
      - uses: actions/checkout@v2
      - name: Download wait script
        # https://github.com/docker/cli/issues/373
        # Pinned to the latest version at the time of creation so we can manually verify new versions
        # More on this in the final workflow step
        run: |
          curl -fsSL --remote-name https://raw.githubusercontent.com/sudo-bmitch/docker-stack-wait/16fe400d8bba5b739bc1f28af4f96dd7fa86ac41/docker-stack-wait.sh
          echo "bbe07ff176af01d402fcc042aa76105f05f1c593feb903e73b7e033021afac3f  docker-stack-wait.sh" | sha256sum --check
          chmod +x docker-stack-wait.sh
      - name: Configure SSH
        # https://docs.docker.com/engine/context/working-with-contexts/
        # This avoids passing an -H parameter to every Docker CLI call and modifying the wait script
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_HOST_KEY }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.DEPLOY_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod -R g-rwx,o-rwx ~/.ssh
          docker context create deploy-swarm --docker host=ssh://${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} --default-stack-orchestrator=swarm
          docker context use deploy-swarm
      - name: Deploy to Docker Swarm
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DISCORD_TOTAL_SHARDS: 3
        run: |
          docker stack deploy discord-bot -c <(docker-compose config) --prune --with-registry-auth
      - name: Wait for Swarm to converge
        # docker stack deploy does not wait for the service to converge. Issuu's sure-deploy doesn't
        # seem to verify if all replicas are actually running and not preparing, but the previously
        # downloaded shell script works really well. This keeps the Actions runner online until all
        # nodes have pulled the new image, so developers can know quicky if a deployment succeeded
        # by the check status. Also, GITHUB_TOKEN is invalidated when the runner exits, so we need
        # to stay online for each swarm node to be authorized to pull from a private registry.
        # Time out after five minutes.
        run: |
          ./docker-stack-wait.sh -t 300 discord-bot
