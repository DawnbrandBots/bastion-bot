name: Build Docker image and deploy to preview

on:
  workflow_call:
  push:
    tags: ["*"]
  pull_request:
    # Only rebuild Docker images if a PR affects it specifically to avoid
    # redundant work since the main workflow already deals with testing builds
    paths:
      - Dockerfile
      - docker-compose.yaml
      - docker-staging.yaml
      - .github/workflows/docker.yml

jobs:
  lint-dockerfile:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
  build:
    runs-on: ubuntu-latest
    if: >-
      !(
        contains(github.event.head_commit.message, '[skip build]') ||
        contains(github.event.head_commit.message, '[build skip]')
      )
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      json: ${{ steps.meta.outputs.json }}
    steps:
      - uses: docker/setup-buildx-action@v3
      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: latest=${{ github.ref == 'refs/heads/master' }}
          tags: |
            type=ref,event=tag
            type=sha,format=long
      - uses: docker/login-action@v3
        if: github.event_name == 'push'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: BOT_REVISION=${{ github.sha }}
          pull: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: contains(needs.build.outputs.tags, 'latest')
    environment: Daichi#3599 (preview)
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download wait script
        # https://github.com/docker/cli/issues/373
        # Pinned to the latest version at the time of creation so we can manually verify new versions
        # More on this in the final workflow step
        run: |
          curl -fsSL --remote-name https://raw.githubusercontent.com/sudo-bmitch/docker-stack-wait/2b3808ed5622e3a2b9f84326d6fd29129497290c/docker-stack-wait.sh
          echo "7e80f5ff9e4e378e5d88738fbc21f19d26f48a95e8aff58115c44701a304fd02  docker-stack-wait.sh" | sha256sum --check
          chmod +x docker-stack-wait.sh
      - name: Configure SSH
        # https://docs.docker.com/engine/context/working-with-contexts/
        # This avoids passing an -H parameter to every Docker CLI call and modifying the wait script
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_HOST_KEY }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.DEPLOY_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod -R g-rwx,o-rwx ~/.ssh
          docker context create deploy-swarm --docker host=ssh://${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}
          docker context use deploy-swarm
      - name: Deploy to Docker Swarm
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          API_URL: ${{ secrets.API_URL_EXTERNAL }}
          HEALTHCHECK_BOT_SNOWFLAKE: "1031374366426009753" # Singing Lanius#9842
          DISCORD_TOTAL_SHARDS: 1
        run: |
          docker kill --signal=SIGTTIN $(docker ps --filter label=com.docker.swarm.service.name=discord-bot_bot --quiet) || echo No existing container!
          docker stack config -c docker-staging.yaml | docker stack deploy discord-bot -c - --prune --with-registry-auth
      - name: Wait for Swarm to converge
        # docker stack deploy does not wait for the service to converge. Issuu's sure-deploy doesn't
        # seem to verify if all replicas are actually running and not preparing, but the previously
        # downloaded shell script works really well. This keeps the Actions runner online until all
        # nodes have pulled the new image, so developers can know quicky if a deployment succeeded
        # by the check status. Also, GITHUB_TOKEN is invalidated when the runner exits, so we need
        # to stay online for each swarm node to be authorized to pull from a private registry.
        # Time out after five minutes.
        run: |
          ./docker-stack-wait.sh -t 300 discord-bot
          docker kill --signal=SIGTTOU $(docker ps --filter label=com.docker.swarm.service.name=discord-bot_bot --quiet)
      - name: Deploy Slash Commands to AlphaKretin Discord Bots
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        run: |
          docker context use default
          docker run -e DISCORD_TOKEN -e BOT_NO_DIRECT_MESSAGE_SEARCH=1 ${{ fromJSON(needs.build.outputs.json).tags[0] }} --deploy-slash 381294999729340417
          docker run -e DISCORD_TOKEN -e BOT_NO_DIRECT_MESSAGE_SEARCH=1 ${{ fromJSON(needs.build.outputs.json).tags[0] }} --deploy-slash user-install
