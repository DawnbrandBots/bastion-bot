name: Docker-based continuous deployment

on:
  push:
    branches: ["master"] # Publish as Docker "latest"
    tags: ["*"]
  pull_request:
    # Only rebuild Docker images if a PR affects it specifically to avoid
    # redundant work since the main workflow already deals with testing builds
    paths:
      - Dockerfile
      - .github/workflows/docker.yml

jobs:
  build:
    runs-on: ubuntu-latest
    if: >-
      !(
        contains(github.event.head_commit.message, '[ci skip]') ||
        contains(github.event.head_commit.message, '[skip ci]') ||
        contains(github.event.head_commit.message, '[actions skip]') ||
        contains(github.event.head_commit.message, '[skip actions]') ||
        contains(github.event.head_commit.message, '[skip build]') ||
        contains(github.event.head_commit.message, '[build skip]')
      )
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Infer image tag
        id: infer
        if: github.event_name == 'push'
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Use Docker `latest` tag convention
          [[ "$VERSION" == "master" ]] && VERSION=latest
          echo "::set-output name=tag::$VERSION"
      - uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name == 'push' }}
          tags: ghcr.io/kevinlul/eris-bot-template:${{ steps.infer.outputs.tag || 'latest' }}
          build-args: REVISION=${{ github.sha }}
          pull: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
      - name: Configure SSH
        if: steps.infer.outputs.tag == 'latest'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_HOST_KEY }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.DEPLOY_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod -R g-rwx,o-rwx ~/.ssh
      - name: Deploy to Docker Swarm
        if: steps.infer.outputs.tag == 'latest'
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DISCORD_TOTAL_SHARDS: 3
        run: |
          docker -H ssh://${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} stack deploy discord-bot -c <(docker-compose config) --prune
