name: Release to production (Swarm)

on:
  workflow_dispatch:
    inputs:
      presence:
        description: "Discord Presence status message"
        required: false
        default: ""
      motd:
        description: "Help message addendum"
        required: false
        default: ""
      revision:
        description: "GitHub commit SHA"
        required: false
        default: ""

jobs:
  release:
    runs-on: ubuntu-latest
    environment: Bastion#1870 (production)
    steps:
      - uses: actions/checkout@v4
      - name: Determine recommended number of shards
        id: shards
        # https://discord.com/developers/docs/topics/gateway#get-gateway-bot
        run: |
          SHARDS=$(curl -fsSL https://discord.com/api/gateway/bot -H "Authorization: Bot ${{ secrets.PRODUCTION_DISCORD_TOKEN }}" | jq .shards)
          echo "::set-output name=count::$SHARDS"
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Save some time between container up and Slash Command deployment
      - run: docker pull ghcr.io/dawnbrandbots/bastion-bot:sha-${{ github.event.inputs.revision || github.sha }}
      - name: Download wait script
        # https://github.com/docker/cli/issues/373
        # Pinned to the latest version at the time of creation so we can manually verify new versions
        # More on this in the final workflow step
        run: |
          curl -fsSL --remote-name https://raw.githubusercontent.com/sudo-bmitch/docker-stack-wait/16fe400d8bba5b739bc1f28af4f96dd7fa86ac41/docker-stack-wait.sh
          echo "bbe07ff176af01d402fcc042aa76105f05f1c593feb903e73b7e033021afac3f  docker-stack-wait.sh" | sha256sum --check
          chmod +x docker-stack-wait.sh
      - name: Configure SSH
        # https://docs.docker.com/engine/context/working-with-contexts/
        # This avoids passing an -H parameter to every Docker CLI call and modifying the wait script
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_HOST_KEY }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.PRODUCTION_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          echo "${{ secrets.PRODUCTION_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod -R g-rwx,o-rwx ~/.ssh
          docker context create deploy-swarm --docker host=ssh://${{ secrets.PRODUCTION_DEPLOY_USER }}@${{ secrets.PRODUCTION_DEPLOY_HOST }}
          docker context use deploy-swarm
      - name: Deploy to Docker Swarm
        env:
          # docker/metadata-action type=sha,format=long
          DOCKER_TAG: sha-${{ github.event.inputs.revision || github.sha }}
          DISCORD_TOKEN: ${{ secrets.PRODUCTION_DISCORD_TOKEN }}
          API_URL: ${{ secrets.API_URL_INTERNAL }}
          IMAGE_HOST: ${{ secrets.IMAGE_HOST }}
          FTP_URL: ${{ secrets.FTP_URL }}
          BOT_LOGGER_WEBHOOK: ${{ secrets.PRODUCTION_LOGGER_WEBHOOK }}
          BOT_PRESENCE: ${{ github.event.inputs.presence }}
          BOT_MOTD: ${{ github.event.inputs.motd }}
          BOT_BIND_MOUNT: ${{ secrets.PRODUCTION_BIND_MOUNT }}
        run: |
          docker kill --signal=SIGTTIN $(docker ps --filter label=com.docker.swarm.service.name=bastion_bot --quiet) || echo No existing container!
          docker stack deploy bastion -c <(docker-compose config) --prune --with-registry-auth
      - name: Wait for Swarm to converge
        # docker stack deploy does not wait for the service to converge. Issuu's sure-deploy doesn't
        # seem to verify if all replicas are actually running and not preparing, but the previously
        # downloaded shell script works really well. This keeps the Actions runner online until all
        # nodes have pulled the new image, so developers can know quicky if a deployment succeeded
        # by the check status. Also, GITHUB_TOKEN is invalidated when the runner exits, so we need
        # to stay online for each swarm node to be authorized to pull from a private registry.
        # Time out after five minutes.
        run: |
          ./docker-stack-wait.sh -t 300 bastion
          docker kill --signal=SIGTTOU $(docker ps --filter label=com.docker.swarm.service.name=bastion_bot --quiet)
      - name: Deploy Slash Commands globally
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        run: |
          docker context use default
          docker run -e DISCORD_TOKEN ghcr.io/dawnbrandbots/bastion-bot:sha-${{ github.event.inputs.revision || github.sha }} --deploy-slash
